/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.apps.administrador.jasperreports;

import com.l2fprod.common.swing.StatusBar;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JMenuBar;
import javax.swing.JProgressBar;
import javax.swing.JToolBar;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.iesapp.framework.pluggable.StatusBarZone;
import org.iesapp.framework.pluggable.TopModuleWindow;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.framework.util.HtmlLog;
import org.iesapp.util.StringUtils;

/**
 *
 * @author Josep
 */
public class JasperCompileModule extends TopModuleWindow {

    private final String path;
    private DefaultTreeModel treeModel;
    private final JProgressBar jProgressBar1;

    /**
     * Creates new form JasperCompileModule
     */
    public JasperCompileModule() {
        this.moduleDescription = "Compiler for Jasper Reports";
        this.moduleDisplayName = "Jasper Compiler";
        this.moduleName = "japerCompiler";
          
        initComponents();
        jProgressBar1 = new JProgressBar();
        jProgressBar1.setVisible(false);
        jSplitPane1.setResizeWeight(0.1);

        path = CoreCfg.contextRoot + "\\reports";
        jTextField1.setText(path);
        setTree();
        

        org.iesapp.framework.util.JarClassLoader.getInstance().addDirToClasspath(new File(CoreCfg.contextRoot+"\\lib\\reports"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        htmlLog1 = new org.iesapp.framework.util.HtmlLog();

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/apps/administrador/icons/run.gif"))); // NOI18N
        jButton1.setText("Compila");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Directori de reports:");

        jTextField1.setEditable(false);
        jTextField1.setText("jTextField1");

        jButton2.setText("···");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setViewportView(htmlLog1);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentContainer());
        getContentContainer().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        (new Compile()).start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fchooser = new JFileChooser();
        fchooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fchooser.setDialogTitle("Choose directory");
        fchooser.setCurrentDirectory(new File(CoreCfg.contextRoot+"\\reports"));
        fchooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int showOpenDialog = fchooser.showOpenDialog(this);
        if(showOpenDialog==JFileChooser.APPROVE_OPTION)
        {
            jTextField1.setText(fchooser.getSelectedFile().getAbsolutePath());
        }
        fchooser = null;
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.iesapp.framework.util.HtmlLog htmlLog1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private void setTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(jTextField1.getText());
        treeModel = new DefaultTreeModel(root);
        
        File dir =  new File(jTextField1.getText());
        FileFilter fileFilter = new FileFilter() {

            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".jrxml");
            }
        };
       
        File[] listFiles = dir.listFiles(fileFilter);
        for(File f: listFiles)
        {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(f.getName());
            root.add(node);
            if(f.isDirectory())
            {
                recursiveTree(node, f);
            }
           
        }
        
        jTree1.setModel(treeModel);
        jTree1.setSelectionRow(0);
           
    }

    private void recursiveTree(DefaultMutableTreeNode base, File dir) {
        FileFilter fileFilter = new FileFilter() {

            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".jrxml");
            }
        };
       
        File[] listFiles = dir.listFiles(fileFilter);
        for(File f: listFiles)
        {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(f.getName());
            
            if(f.isDirectory())
            {
                if(f.listFiles(fileFilter).length>0)
                {
                    base.add(node);
                    recursiveTree(node, f);
                }
            }
            else
            {
                base.add(node);
            }
           
        }
        
    }

    private class Compile extends Thread {

        @Override
        public void run() {
            jButton1.setEnabled(false);
            List<File> files = new ArrayList<File>();
            try {
                //Obté una estructura de tots els directoris i fitxers
                //A qualsevol report li pas el directori complet
                //Tria el node de l'arbre
                TreePath selectionPath = jTree1.getSelectionPath();
                if(selectionPath==null) {
                    return;
                }
                String fullPath = (String) ((javax.swing.tree.DefaultMutableTreeNode) (selectionPath.getPathComponent(0))).getUserObject();
                for(int i=1; i<selectionPath.getPathCount(); i++)
                {
                      fullPath += "\\" + (String) ((javax.swing.tree.DefaultMutableTreeNode) (selectionPath.getPathComponent(i))).getUserObject();
                }
                
                if(fullPath.endsWith(".jrxml"))
                {
                    files = new ArrayList<File>();
                    files.add(new File(fullPath));
                }
                else
                {
                    files = getFileListing(new File(fullPath));
                }
                
                 
            } catch (FileNotFoundException ex) {
                htmlLog1.append("" + ex, "body", HtmlLog.ERRORTYPE);
                Logger.getLogger(JasperCompileModule.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(files.isEmpty())
            {
                return;
            }
            jProgressBar1.setVisible(true);
            float increment = 100f/(files.size());
            int num = 0;
            for (File file : files) {
                jProgressBar1.setValue( Math.round(num*increment) );
                num +=1;
                if (file.isFile() && file.toString().contains(".jrxml")) {
                    try{
                        
                        compileFile(file);

                    } catch (Exception ex) {
                        Logger.getLogger(JasperCompileModule.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                    htmlLog1.append("COMPILATION SUCCESS: " + file.toString(), "body", HtmlLog.COMMENTTYPE);
                }
            }

            jButton1.setEnabled(true);
            jProgressBar1.setVisible(false);
        }
    }

    /**
     * Recursively walk a directory tree and return a List of all Files found;
     * the List is sorted using File.compareTo().
     *
     * @param aStartingDir is a valid directory, which can be read.
     */
    static public List<File> getFileListing(
            File aStartingDir) throws FileNotFoundException {
        validateDirectory(aStartingDir);
        List<File> result = getFileListingNoSort(aStartingDir);
        Collections.sort(result);
        return result;
    }

    // PRIVATE //
    static private List<File> getFileListingNoSort(
            File aStartingDir) throws FileNotFoundException {
        List<File> result = new ArrayList<File>();
        File[] filesAndDirs = aStartingDir.listFiles();
        List<File> filesDirs = Arrays.asList(filesAndDirs);
        for (File file : filesDirs) {
            result.add(file); //always add, even if directory
            if (!file.isFile()) {
                //must be a directory
                //recursive call!
                List<File> deeperList = getFileListingNoSort(file);
                result.addAll(deeperList);
            }
        }
        return result;
    }

    /**
     * Directory is valid if it exists, does not represent a file, and can be
     * read.
     */
    static private void validateDirectory(
            File aDirectory) throws FileNotFoundException {
        if (aDirectory == null) {
            throw new IllegalArgumentException("Directory should not be null.");
        }
        if (!aDirectory.exists()) {
            throw new FileNotFoundException("Directory does not exist: " + aDirectory);
        }
        if (!aDirectory.isDirectory()) {
            throw new IllegalArgumentException("Is not a directory: " + aDirectory);
        }
        if (!aDirectory.canRead()) {
            throw new IllegalArgumentException("Directory cannot be read: " + aDirectory);
        }
    }

    @Override
    public void setMenus(JMenuBar jMenuBar1, JToolBar jToolbar1, StatusBar jStatusBar1) {
       jToolbar1.add(jButton1);
       ( (StatusBarZone) jStatusBar1.getZone("third")).addComponent(jProgressBar1);
    }
    
    public static void compileFile(File file) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException
    {
          
        // Recuperamos el fichero fuente
        Class<?> loadClass1 = Class.forName("net.sf.jasperreports.engine.xml.JRXmlLoader");
        Class<?> loadClass2 = Class.forName("net.sf.jasperreports.engine.design.JasperDesign");
        Class<?> loadClass3 = Class.forName("net.sf.jasperreports.engine.JasperCompileManager");

        System.out.println(""+file);
        Object jdp = loadClass1.getMethod("load", new Class[]{java.io.File.class}).invoke(null, new Object[]{file});
//                JasperDesign jd = JRXmlLoader.load(file);
//                // Compilamos el informe jrxml
        String output = StringUtils.BeforeLast(file.toString(), ".") + ".jasper";
//               JasperCompileManager.compileReportToFile(jd, output);
        loadClass3.getMethod("compileReportToFile", new Class[]{loadClass2, String.class}).invoke(null, new Object[]{jdp, output});

    }
     
}
