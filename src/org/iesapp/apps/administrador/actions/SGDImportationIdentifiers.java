/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.apps.administrador.actions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.iesapp.clients.iesdigital.fitxes.SGDImporterConfig;
import org.iesapp.clients.sgd7.base.BeanTipoIncidencias;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.util.StringUtils;

/**
 *
 * @author Josep
 */
public class SGDImportationIdentifiers extends javar.JRDialog {
    private final HashMap<String, ArrayList<String>> sgdImporterSimbolLists;
    private final ArrayList<String> sgdImporterCRequired;
    private final DefaultListModel modelList1;
    private final DefaultListModel modelList2;
    private final DefaultComboBoxModel comboModel1;
    private final CoreCfg coreCfg;

    /**
     * Creates new form SGDImportationTemplates
     */
    public SGDImportationIdentifiers(java.awt.Frame parent, boolean modal, CoreCfg coreCfg) {
        super(parent, modal);
        initComponents();
        this.coreCfg = coreCfg;
        
        //Force configuration to check if tables are created
       new SGDImporterConfig(coreCfg.anyAcademic, coreCfg.getIesClient()).getColumnFields();
        
        //Read actual configuration
        String var1 = (String) CoreCfg.configTableMap.get("sgdImporterSimbolLists");
        String var2 = (String) CoreCfg.configTableMap.get("sgdImporterCRequired");
        
        //Parse-it
        HashMap<String,String> tmp = StringUtils.StringToHash(var1, ";");
        sgdImporterSimbolLists = new HashMap<String,ArrayList<String>>();
        for(String ky: tmp.keySet())
        {
            String list = tmp.get(ky);
            ArrayList<String> parseStringToArray = StringUtils.parseStringToArray(list, ",", StringUtils.CASE_UPPER);
            sgdImporterSimbolLists.put(ky, parseStringToArray);
        }
        
        sgdImporterCRequired = StringUtils.parseStringToArray(var2, ";", StringUtils.CASE_UPPER);
        
        
        modelList1 = new DefaultListModel();
        modelList2 = new DefaultListModel();
        jList1.setModel(modelList1);
        jList2.setModel(modelList2);
        
        comboModel1 = new DefaultComboBoxModel();
        jComboBox1.setModel(comboModel1);
        LinkedHashMap<Integer, BeanTipoIncidencias> mapIncidencias = coreCfg.getSgdClient().getTipoIncidencias().getMapIncidencias();
        
        for( BeanTipoIncidencias bti: mapIncidencias.values() )
        {
            comboModel1.addElement( bti.getSimbolo() );
        }
        
            
        for(String identifier: sgdImporterSimbolLists.keySet())
        {
            modelList1.addElement(identifier);
        }
     
     
        fillView();
        if(modelList1.size()>0)
        {
            jList1.setSelectedIndex(0);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Identificadors d'importació d'incidències SGD");

        jLabel1.setText("Identificadors");

        jLabel2.setText("Simbols inclosos en l'identificador:");

        jButton1.setText("+ Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("- Del");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jCheckBox1.setText(" Es requereix un comentari o observació");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTextField1.setEnabled(false);

        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList2);

        jButton3.setText("-");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Add simbol");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Delete simbol");

        jButton4.setText("Cancel·la");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Accepta");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(34, 34, 34))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addContainerGap())))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(2, 2, 2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Add new simbol
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        
        String simbol = (String) jComboBox1.getSelectedItem();
        if(!modelList2.contains(simbol))
        {
            String mainid = (String) jList1.getSelectedValue();
            if(sgdImporterSimbolLists.get(mainid)!=null)
            {
                sgdImporterSimbolLists.get(mainid).add(simbol);
            }
            modelList2.addElement(simbol);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    //Remove simbol
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int row = jList2.getSelectedIndex();
        if(row<0)
        {
            return;
        }
        String simbol = (String)jList2.getSelectedValue();
        modelList2.remove(row);
        String mainid = (String) jList1.getSelectedValue();
        sgdImporterSimbolLists.get(mainid).remove(simbol);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        String identifier = jTextField1.getText();
        if(jCheckBox1.isSelected())
        {
            if(!sgdImporterCRequired.contains(identifier))
            {
                sgdImporterCRequired.add(identifier);
            }
        }
        else
        {
            sgdImporterCRequired.remove(identifier);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    //Add new identifier
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String newid = JOptionPane.showInputDialog(this, "Nom del nou identificador");
        if(newid!=null && !newid.trim().isEmpty())
        {
            modelList1.addElement(newid.trim());
            jList1.setSelectedValue(newid.trim(),true);
           
            sgdImporterSimbolLists.put(newid.trim(), new ArrayList<String>());
            
       
            jList1.setSelectedIndex(modelList1.getSize()-1);
        
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    //Delete identifier
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         int row = jList1.getSelectedIndex();
         if(row<0)
         {
             return;
         }         
       
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Segur que voleu eliminar aquest identificador així com\nles dades importades a les fitxes dels alumnes", "Confirmació", JOptionPane.OK_CANCEL_OPTION);
        if(showConfirmDialog == JOptionPane.OK_OPTION)
        {
            String identifer = (String) jList1.getSelectedValue();
            modelList1.remove(row);
            
            sgdImporterCRequired.remove(identifer);
            sgdImporterSimbolLists.remove(identifer);
            
            for(int i=1; i<4; i++)
            {
                String SQL1 = "ALTER TABLE "+CoreCfg.core_mysqlDBPrefix+".fitxa_alumne_curs"+
                    " DROP COLUMN " + identifer+"_"+i+"A";
                coreCfg.getMysql().executeUpdate(SQL1);
            }
            if (modelList1.size() > 0) {
                jList1.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       saveFromView();
       this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        fillView();
    }//GEN-LAST:event_jList1ValueChanged

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void fillView() {
       
       int row = jList1.getSelectedIndex();
       
       jCheckBox1.setEnabled(row>=0);
       jTextField1.setText("");
       modelList2.removeAllElements();
       jList2.setEnabled(row>=0);
       jComboBox1.setEnabled(row>=0);
       jButton3.setEnabled(row>=0);
               
       if(row>=0)
       {
            String identifier = (String) jList1.getSelectedValue();
            jTextField1.setText(identifier);
           
            for(String key: sgdImporterSimbolLists.get(identifier))
            {
                modelList2.addElement(key);
            }
            
            jCheckBox1.setSelected(sgdImporterCRequired.contains(identifier));
            
       }
       
    }
    
    private void saveFromView()
    {
        String required = "";
        for(String s: sgdImporterCRequired)
        {
            required += s+";";
        }
        
        String list = "";
        String sep2 = "";
        for(String identifier: sgdImporterSimbolLists.keySet())
        {
            list += sep2+ identifier+"={";
            String sep = "";
            for(String simbol: sgdImporterSimbolLists.get(identifier))
            {
                list+=sep+simbol;
                sep = ",";
            }
            list +="}";
            sep2 = ";";
        }
        
        CoreCfg.configTableMap.put("sgdImporterCRequired", required);
        coreCfg.updateDatabaseCfg("sgdImporterCRequired", required);
        
        CoreCfg.configTableMap.put("sgdImporterSimbolLists", list);
        coreCfg.updateDatabaseCfg("sgdImporterSimbolLists", list);
        
           
        //Force configuration to check if tables are created
        new SGDImporterConfig(coreCfg.anyAcademic, coreCfg.getIesClient()).getColumnFields();
      
    }
}
