/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 29-jun-2011, 15:23:50
 */

package org.iesapp.apps.administrador;

import java.awt.Cursor;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.iesapp.clients.iesdigital.alumnat.Alumne;
import org.iesapp.framework.dialogs.CercadorDB;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.framework.util.HtmlLog;
import org.iesapp.util.DataCtrl;
import org.iesapp.util.StringUtils;


/**
 *
 * @author Josep
 */
public class MainFrame extends javax.swing.JPanel {
    
    public static final int NODESCRIPTION = -1;
    public static final int LASTDESCRIPTION = 0;
    public static final int IMPORTAIDS = 1;
    public static final int IMPORTAPWDS = 2;
    public static final int IMPORTAFESTIUS = 3;
    public static final int ASSIGNATUTORS = 4;
    public static final int IMPORTAHISTORIC = 5;
    public static final int CANVIGRUP = 6;
    private String lastText="";
    private int current_exp;
    private Cfg cfg;
    
    
    public void setDescription(int idDescription) {
        
        String text = "";
        switch(idDescription)
        {
            case MainFrame.IMPORTAIDS: text="Importa IDs del Professorat del Sistema SGD<br><br>"+
                         "Crea un mapa entre l'identificador idProfessor que utilitza SGD i l'id abrev que "+
                         "utilitza iesDigital. És important que la correspondència sigui correcte, sobretot "+
                         "pel correcte funcionament de missatges, sol·licituds d'informació a tutors, etc..."; 
                    break;
                
            case MainFrame.IMPORTAPWDS: text="Importa les contrasenyes del Professorat des del Sistema SGD<br><br>"+
                         "El professorat utilitzarà la mateixa contrasenya que fa servir amb les unitats personals "+
                         "del sgd. Com a nom d'usuari, però, farà servir la seva id `abrev` assignada. "; 
                    break;
            case MainFrame.ASSIGNATUTORS: text="Cerca els tutors i els assigna als seus alumnes<br><br>"+
                         "Aquesta funcionalitat cerca tots els tutors del centre i els assigna als alumnes del sistema "+
                         "de fitxes. És important perquè el tutor tingui dret d'edició sobre els seus alumnes."; 
                    break;
            case MainFrame.IMPORTAFESTIUS: text="Importa Festius<br><br>"+
                         "Llegeix els dies festius del sistema SGD i els volca a la taula de festius del sistema iesDigital."; 
                    break;
                
            case MainFrame.IMPORTAHISTORIC: text="Importa dades Històriques<br><br>"+
                         "Per dades històriques s'enten el grup, tutor i any acadèmic de cada alumne. Aquestes dades s'emmagatzemen "+
                         "a la taula xes_alumne_historic del sistema iesDigital.<br>"+
                         "Si heu fet una instal·lació des de fitxers excel baixats del Xestib no cal aquesta funció. És interessant "+
                         "per importar dades de cursos passats (en caràcter retroactiu)."; 
                    break;
                
            case MainFrame.CANVIGRUP: text="Canvis de grup, baixes, i noves incorporacions<br><br>"+
                         "Avisa de Canvis de grup, baixes, i noves incorporacions.<br>";
                         
                    break;
                   
        }
        if(text.length() != 0) {
            lastText = text;
        }
        
        jTextPane1.setText(text);
        jTextPane1.setCaretPosition(0);
    }

  

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
    }
    
    public void startUp(Cfg cfg)
    {
          this.cfg = cfg;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Descripció"));

        jTextPane1.setEditable(false);
        jTextPane1.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //importa les IDs
    
    //Demana confirmacio
    public static boolean confirmacio()
    {
        //missatge d'error :: no estic en condicions
        Object[] options = {"No", "Sí"};
        String missatge = "";

        missatge = "Aquesta acció modificarà la base de dades.\nSi voleu veure els canvis que es duran a terme\nrealitzau primer una simulació.\nVoleu continuar de totes maneres?";

        int n = JOptionPane.showOptionDialog(javar.JRDialog.getActiveFrame(),
        missatge, "Informació",
        JOptionPane.INFORMATION_MESSAGE,
        JOptionPane.WARNING_MESSAGE,
        null,
        options,
        options[0]);

        return (n==1);
    }
    
    //Importa les aules
    
   
     
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    public void importaIDs(int mode) {
      
       if(mode==1 && !confirmacio()) {
            return;
        }
 
       DataCtrl cd = new DataCtrl();
       String txt = cd.getDiaMesComplet() + "; " + cd.getHora();
       cfg.job1 = txt;
       cfg.saveIni();
      
       importador(1, mode);
    }

    public void importaPwds(int mode) {
        
       if(mode==1 && !confirmacio()) {
            return;
        }
       
       DataCtrl cd = new DataCtrl();
       String txt = cd.getDiaMesComplet() + "; " + cd.getHora();
       cfg.job2 = txt;
       cfg.saveIni();
      

       importador(2, mode);
    }

    public void importaFestius(int mode) {
       
       AdministradorGUI.htmlLog1.clear();
       
       if(mode==1 && !confirmacio()) {
            return;
        }
       
       if(mode == 0) 
       {
           AdministradorGUI.htmlLog1.append("***** MODE SIMULACIO *****",HtmlLog.COMMENTTYPE);
       }
       else
       {
           DataCtrl cd = new DataCtrl();
           String txt = cd.getDiaMesComplet() + "; " + cd.getHora();
           cfg.job3 = txt;
           cfg.saveIni(); 
       }
        
       
       int nOk = 0;
       AdministradorGUI.htmlLog1.append("IMPORTACIÓ DE DIES FESTIUS",HtmlLog.TITLETYPE);
       
       ArrayList<String> list = new ArrayList<String>();
       
       String SQL1 = "Select * from festivos";
         try {
           Statement st = cfg.getCoreCfg().getSgd().createStatement();
           ResultSet rs1 = cfg.getCoreCfg().getSgd().getResultSet(SQL1,st); 
            while (rs1 != null && rs1.next()) 
            {
                String data = rs1.getString("fecha");
                list.add(data);
                AdministradorGUI.htmlLog1.append("Detectada data "+data);
            }
           rs1.close();
           st.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
       
       for(int i=0; i<list.size(); i++)
       {
           
            String dia = list.get(i);
            //Comprova si no existeix en la base i l'introdueix
            SQL1 = "Select * from sig_festius where desde='"+dia+"'";
             try {
                 Statement st = cfg.getCoreCfg().getMysql().createStatement();
                 ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st); 
                if (rs1 != null && !rs1.next()) {
                    
                    String SQL2 = "INSERT INTO sig_festius (desde, fins, commentari) "
                            + " VALUES('"+dia+"', '"+dia+"', '' )";
                    
                    
                    AdministradorGUI.htmlLog1.append(SQL2);
                    
                    int nup = 0;
                    if(mode==1) {
                        nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL2);
                    }
                    else {
                        nup = 1;
                    }
                    
                    if(nup>0) 
                    {
                        AdministradorGUI.htmlLog1.append("S'ha introduit festiu ::"+dia+"\n");
                        nOk += 1;
                    }
                }
                else
                {
                      AdministradorGUI.htmlLog1.append("El dia "+dia+" ja existeix en la base...", HtmlLog.WARNINGTYPE);
                }
                rs1.close();
                st.close();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       
       AdministradorGUI.htmlLog1.append("S'han introduit "+ nOk + " entrades.",HtmlLog.SUMMARYTYPE);
       
    }


    
    private void importador(int jobID, int mode){
        
          if(mode==1 && !confirmacio()) {
            return;
        }
        //String host, String db, String user, String pass
        AdministradorGUI.htmlLog1.setText("");
        
        if(mode == 0) {
            AdministradorGUI.htmlLog1.append("***** MODE SIMULACIO *****", HtmlLog.COMMENTTYPE);
        }
        
        if(jobID==1) {
            AdministradorGUI.htmlLog1.append("> Intentant importar IDs de Professors...", HtmlLog.TITLETYPE);
        }
        else if(jobID==2) {
            AdministradorGUI.htmlLog1.append("> Intentant importar PWDs de Professors...", HtmlLog.TITLETYPE);
        }

        HashMap<String, String> mapProf = cfg.getCoreCfg().getIesClient().getProfessoratData().getMapAbrev();
        HashMap<String, Number> mapProfSGD = new HashMap<String, Number>();
        HashMap<String, String> mapProfPWD = new HashMap<String, String>();
        int nerr = 0;
        int nOk = 0;


        boolean silent = false;
        for(String ky: mapProf.keySet())
        {
            String profe = mapProf.get(ky);
            String profe2 = "";
            if(profe.contains(",")) {
                profe2 = StringUtils.BeforeLast(profe, ",");
            }

            String SQL1 = "SELECT * FROM profesores WHERE nombre LIKE '"+profe2+"%'";
             
            try {
                Statement st = cfg.getCoreCfg().getSgd().createStatement();
                ResultSet rs1 = cfg.getCoreCfg().getSgd().getResultSet(SQL1,st); 
                int ncasos = 0;
                int codigo = -1;
                String pwd = "";
                
                while (rs1!=null && rs1.next()) {

                    codigo = rs1.getInt("codigo");
                    pwd = rs1.getString("claveUp");
                    ncasos += 1;
                }
                if(ncasos != 1)
                {
                    //Un dialeg ha de permetre refinar la cerca
                    String newQuery = "";
                    if(!silent)
                    {
                    CercadorDB dlg = new CercadorDB(javar.JRDialog.getActiveFrame(), true, cfg.getCoreCfg().getSgd(), SQL1, 
                            "##ERROR: No es pot trobar el professor a la base sgd :: " + profe+"\n");
                    dlg.setLocationRelativeTo(null);
                    dlg.setVisible(true);
                    newQuery = dlg.newquery;
                    silent = dlg.silent;
                    dlg.dispose();
                    }

                    if(newQuery.length() != 0)
                    {

                        //intenta fer la nova query
                        Statement st2 = cfg.getCoreCfg().getSgd().createStatement();
                        ResultSet rs2 = cfg.getCoreCfg().getSgd().getResultSet2(newQuery,st2);
                        int ncasos2 = 0;
                        while (rs2!=null && rs2.next()) {
                            codigo = rs2.getInt("codigo");
                            pwd = rs2.getString("claveUp");
                            ncasos2 += 1;
                        }
                        if(rs2!=null) {
                            rs2.close();
                            st.close();
                        }
                        if(ncasos2==1)
                        {
                           mapProfSGD.put(ky, codigo);
                           mapProfPWD.put(ky, pwd);
                        }
                        else
                        {
                            AdministradorGUI.htmlLog1.append("###ERROR! No es pot trobar el professor a la base sgd :: " + profe, HtmlLog.ERRORTYPE);
                            nerr +=1;
                        }

                    }
                    else
                    {
                        AdministradorGUI.htmlLog1.append("###ERROR! No es pot trobar el professor a la base sgd :: " + profe, HtmlLog.ERRORTYPE);
                        nerr +=1;
                    }
                    
                }
                else
                {
                    mapProfSGD.put(ky, codigo);
                    mapProfPWD.put(ky, pwd);
                }

                rs1.close();
                st.close();

            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
      }



        for(String ky: mapProfSGD.keySet())
        {
            int codig = mapProfSGD.get(ky).intValue();
            String pwd =  mapProfPWD.get(ky);

            if(jobID==1)
            {
                String SQL2 = "UPDATE sig_professorat SET idSGD="+codig+"  WHERE abrev='"+ky+"'";
                AdministradorGUI.htmlLog1.append(SQL2);
                int nup=0;
                if(mode==1) {
                    nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL2);
                }
                else {
                    nup = 1;
                }
                if(nup>0) {
                    nOk +=1;
                }
            }
            else if(jobID==2)
            {
                
                String SQL3 = "UPDATE usu_usuari SET usuari='"+codig+"', Contrasenya='"+pwd+"'  WHERE Nom='"+ky+"'";
                AdministradorGUI.htmlLog1.append(SQL3);
                
                int nup2 = 0;
                if(mode==1) {
                    nup2 = cfg.getCoreCfg().getMysql().executeUpdate(SQL3);
                }
                else {
                    nup2 = 1;
                }
                
                if(nup2>0) {
                    nOk +=1;
                }

                if(nup2==0)
                {
                   String SQL4 = "INSERT INTO usu_usuari (Nom, usuari, Contrasenya) VALUES('"+ky+"','"+ky+"','"+pwd+"')";
                   AdministradorGUI.htmlLog1.append(SQL4);
                   
                   int nup3 = 0;
                   if(mode==1) {
                        nup3 = cfg.getCoreCfg().getMysql().executeUpdate(SQL4);
                    }
                   else {
                        nup3 = 1;
                    }
                   
                   if(nup3>0) {
                        nOk +=1;
                    }
                }
            }
        }

         AdministradorGUI.htmlLog1.append("S'han actualitzat "+ nOk + " entrades.\n", HtmlLog.SUMMARYTYPE);
         AdministradorGUI.htmlLog1.append("El procés ha acabat amb "+ nerr + " errors. ", HtmlLog.SUMMARYTYPE);
         if(nerr>0) {
            AdministradorGUI.htmlLog1.append("Per favor, corregiu-los manualment.\n", HtmlLog.SUMMARYTYPE);
        }

  }

   public void checkCorrespondencia() {
   
       AdministradorGUI.htmlLog1.clear();
       AdministradorGUI.htmlLog1.append("***** MODE SIMULACIO *****", HtmlLog.COMMENTTYPE);
       
       
       ArrayList<Integer> sgd_expd = new ArrayList<Integer>();
       ArrayList<Integer> fitxa_expd = new ArrayList<Integer>();
       
       this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
       //getAll alumnes from sgd
       //String SQL1 = "SELECT expediente FROM alumnos";
//       String SQL1= "SELECT expediente FROM alumnos AS al INNER JOIN gruposalumno AS gal ON al.id=gal.idAlumnos "+
//                    " INNER JOIN grupos AS grup ON grup.grupoGestion=gal.grupoGestion ORDER BY grupo";   
       
       String SQL1 = "SELECT expediente, MAX(aa.opcion) AS maxopcion "
                + " FROM alumnos AS al INNER JOIN gruposalumno AS gal ON al.id=gal.idAlumnos "
                + " INNER JOIN grupos AS grup ON grup.grupoGestion=gal.grupoGestion "
                + " INNER JOIN asignaturasalumno AS aa ON aa.idAlumnos=al.id GROUP BY expediente ORDER BY grupo";
                
       try {
           Statement st = cfg.getCoreCfg().getSgd().createStatement();
           ResultSet rs1 = cfg.getCoreCfg().getSgd().getResultSet(SQL1,st); 
            while (rs1 != null && rs1.next()) {
                int expd = rs1.getInt("expediente");
                String maxopcion = rs1.getString("maxopcion");
                if(!maxopcion.equals("0"))
                {
                    sgd_expd.add(expd);
                }
                //System.out.println("sgd expd::"+expd);
            }
            if (rs1 != null) {
               rs1.close();
               st.close();
           }
            
        } catch (SQLException exep) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, exep);
        }
    
       
       //getAll alumnes from fitxes
        SQL1 = "SELECT Exp2 FROM `"+CoreCfg.core_mysqlDBPrefix+"`.xes_alumne_historic WHERE AnyAcademic='"+cfg.getCoreCfg().anyAcademic+"'";
        
        //System.out.println(SQL1);
        try {
             Statement st = cfg.getCoreCfg().getMysql().createStatement();
             ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st); 

            while (rs1 != null && rs1.next()) {
                int expd = rs1.getInt("Exp2");
                fitxa_expd.add(expd);
                //System.out.println("fitxa expd::"+expd);
            }
            if (rs1 != null) {
                rs1.close();
                st.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    

       //Comença comprovant noves incorporacions, és a dir alumnes que estan al sistema
       //sgd pero que no estan al de fitxes
        
       AdministradorGUI.htmlLog1.append("Noves incorporacions: Alumnes que tenen matricula a SGD i falten a IESDIGITAL:",HtmlLog.TITLETYPE);
       AdministradorGUI.htmlLog1.beginTable("nit0",new String[]{"Expedient","Nom alumne/a","Grup"},"body");
       
        
       for(int i=0; i<sgd_expd.size(); i++)
       {
           int exp = sgd_expd.get(i);
           if(!fitxa_expd.contains(exp))
           {               
                  Alumne al = Alumne.getAlumneFromSGD(exp, cfg.coreCfg.getIesClient());
                  AdministradorGUI.htmlLog1.addRowTable(new Object[]{exp, al.getNomComplet(), al.getGrupo().print()},"nit0");
           }
       }
       
       AdministradorGUI.htmlLog1.append("<br>");
       
       //Comprova possibles baixes, és a dir alumnes que estan al sistema fitxes pero
       //que ja no estan al sistema sgd
        
       AdministradorGUI.htmlLog1.append("Possibles Baixes: Alumnes que es troben a IESDIGITAL i no tenen matricula a SGD:", HtmlLog.TITLETYPE);
       AdministradorGUI.htmlLog1.beginTable("nit1",new String[]{"Expedient","Nom alumne/a","Grup"},"body");
        
       for(int i=0; i<fitxa_expd.size(); i++)
       {
           int exp = fitxa_expd.get(i);
           if(!sgd_expd.contains(exp))
           {
               Alumne al = Alumne.getAlumneFromIesDigital(exp, cfg.coreCfg.getIesClient());
               if(!al.getGrupo().grup.equals("X") && !al.getNom1().isEmpty()) {
                   AdministradorGUI.htmlLog1.addRowTable(new Object[]{exp, al.getNomComplet(), al.getGrupo().print()},"nit1");
               }
           }
       }
       
     
       AdministradorGUI.htmlLog1.append("<br>");
       
       //Ara detecta possibles canvis de grup; sobretot a l'ESO i al Batxillerat
        AdministradorGUI.htmlLog1.append("Alumnes que han canviat de grup:", HtmlLog.TITLETYPE);
        AdministradorGUI.htmlLog1.beginTable("nit2",new String[]{"Expedient","Nom alumne/a","Grup a IESDIGITAL","Grup a SGD"},"body");
        
        for(int i=0; i<fitxa_expd.size(); i++)
       {
           int exp = fitxa_expd.get(i);
    
           if(sgd_expd.contains(exp))
           {
               Alumne al1 = Alumne.getAlumneFromIesDigital(exp, cfg.coreCfg.getIesClient());  //it will return empty if not found from fitxa
               Alumne al2 = Alumne.getAlumneFromSGD(exp, cfg.coreCfg.getIesClient());
               
               if(!al1.getGrupo().equals(al2.getGrupo()) && !al1.getNom1().isEmpty()) {
                   AdministradorGUI.htmlLog1.addRowTable(new Object[]{exp, al1.getNomComplet(), al1.getGrupo().print(), al2.getGrupo().print()},"nit2");
               }
                    
           }
        }
       
  
       this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)); 
               
   }

   
    
}
