/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.apps.administrador.bimodules;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.iesapp.apps.administrador.Cfg;
import org.iesapp.framework.pluggable.TopModuleWindow;
import org.iesapp.framework.table.CellTableState;
import org.iesapp.framework.table.MyCheckBoxRenderer;
import org.iesapp.framework.table.MyIconButtonRenderer;
import org.iesapp.framework.table.TextAreaRenderer;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.util.StringUtils;

/**
 *
 * @author Josep
 */
public class UsersControlModule extends TopModuleWindow {
    private final DefaultListModel modelList2;
    private DefaultTableModel modelTable1;
    private final DefaultListModel modelList3;
    private boolean listening=false;
    private final DefaultListModel modelList4;
    private DefaultTableModel modelTable2;
    private final Timer timer;
    private final int timerInterval=5000;
    private final Cfg cfg;

    /**
     * Creates new form UsersControlModule
     */
    public UsersControlModule(Cfg cfg) {
        this.cfg = cfg;
        this.moduleDescription = "Control center for online users";
        this.moduleDisplayName = "Control center";
        this.moduleName = "usersCenter";
        initComponents();
        jSpinner1.setValue(5);
        
        modelList2 = new DefaultListModel();
        modelList3 = new DefaultListModel();
        modelList4 = new DefaultListModel();
        jList2.setModel(modelList2);
        jList3.setModel(modelList3);
        jList4.setModel(modelList4);
        
        updateModels();
        listening = true;
        fillTable();
        fillTable2();
        
         timer = new Timer(timerInterval, new ActionListener ()
        {
                public void actionPerformed(ActionEvent e)
                {
                    fillTable();
                    fillTable2();
                }

         });
         timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cerca processos actius"));

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "*", "FITXES", "RESERVES", "ANUNCIS", "GUARDIES" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel2.setText("IP address / netBIOS");

        jLabel1.setText("Programs");

        jLabel3.setText("Context");

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList2);

        jLabel4.setText("userAbrev");

        jList3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList3.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList3ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jList3);

        jList4.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList4.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList4ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jList4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jButton1.setText("Envia SIGKILL als seleccionats");
        jButton1.setToolTipText("SIGKILL als PIDs seleccionats");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Selecciona tots");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        modelTable1 = new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "", "id", "user", "ip", "netbios", "task", "started", "lasted"
            }
        );
        jTable1.setModel(modelTable1);
        JCheckBox checkbox = new JCheckBox();
        jTable1.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor( checkbox ));
        jTable1.getColumnModel().getColumn(0).setCellRenderer(new MyCheckBoxRenderer());
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane1.addTab("Processos actius", jScrollPane2);

        modelTable2 = new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Delete","pid", "Inici","Lasted","Signal"
            }
        );
        jTable2.setModel(modelTable2);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        String[] icons= new String[]{"/org/iesapp/apps/administrador/icons/delete.gif"};

        jTable2.getColumnModel().getColumn(0).setCellRenderer(new MyIconButtonRenderer(icons));
        jTable2.getColumnModel().getColumn(4).setCellRenderer(new TextAreaRenderer());
        jScrollPane6.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("SIGKILL", jPanel3);

        jLabel5.setText("Persistencia (minuts)");

        jButton2.setText("Envia SIGKILL");
        jButton2.setToolTipText("SIGKILL a qualsevol procés segons la selecció");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jCheckBox1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jButton2)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentContainer());
        getContentContainer().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        fillTable();
    }//GEN-LAST:event_jList1ValueChanged

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        fillTable();
    }//GEN-LAST:event_jList2ValueChanged

    private void jList3ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList3ValueChanged
        fillTable();
    }//GEN-LAST:event_jList3ValueChanged

    private void jList4ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList4ValueChanged
        fillTable();
    }//GEN-LAST:event_jList4ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String pids = "";
        int persistence = ((Number) jSpinner1.getValue()).intValue();
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
            if((Boolean) jTable1.getValueAt(i, 0))
            {
                pids += jTable1.getValueAt(i,1)+",";
            }
        }
        if(!pids.isEmpty())
        {
            pids = StringUtils.BeforeLast(pids, ",");
            String resultat = "CONTEXT={ALL}; IP={ALL}; PROGRAM={ALL}; USERS={ALL}; PID={"+pids+"}";

            String SQL1 = "INSERT INTO sig_log (usua,ip,netbios,domain,tasca,inici,fi,resultat)"
            + " VALUES('ADMIN','"+CoreCfg.ip+"','"+CoreCfg.netbios+"','"+
            CoreCfg.core_PRODUCTID+"','SIGKILL',NOW(),date_add(NOW(),interval "+persistence+" minute),'"+resultat+"')";

            cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
            fillTable2();
            jTabbedPane1.setSelectedIndex(1);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
            jTable1.setValueAt(jCheckBox1.isSelected(), i, 0);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int row = jTable2.getSelectedRow();
        int col = jTable2.getSelectedColumn();
        if(row<0 || col<0) {
            return;
        }

        if(col==0)
        {
            Object pid = jTable2.getValueAt(row, 1);
            String SQL = "DELETE FROM sig_log WHERE id='"+pid+"' LIMIT 1;";
            cfg.getCoreCfg().getMysql().executeUpdate(SQL);
            fillTable2();
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if(!listening) {
            return;
        }

        fillTable();
        fillTable2();
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String contextSelect = "ALL";
        String ipSelect = "ALL";
        String programSelect = "ALL";
        String usersSelect = "ALL";

        int persistence = ((Number) jSpinner1.getValue()).intValue();

        int[] idx1 = jList1.getSelectedIndices();
        if(containsNonZeroIndex(idx1))
        {
            programSelect="";
            Object[] selectedValues = jList1.getSelectedValues();
            for(Object obj: selectedValues)
            {
                if(!programSelect.isEmpty()) {
                    programSelect+=",";
                }
                programSelect += obj;
            }
        }

        idx1 = jList2.getSelectedIndices();
        if(containsNonZeroIndex(idx1))
        {
            ipSelect="";
            Object[] selectedValues = jList2.getSelectedValues();
            for(Object obj: selectedValues)
            {
                if(!ipSelect.isEmpty()) {
                    ipSelect+=",";
                }
                ipSelect += StringUtils.BeforeLast((String) obj, " /");
            }
        }

        idx1 = jList3.getSelectedIndices();
        if(containsNonZeroIndex(idx1))
        {
            usersSelect="";
            Object[] selectedValues = jList3.getSelectedValues();
            for(Object obj: selectedValues)
            {
                if(!usersSelect.isEmpty()) {
                    usersSelect+=",";
                }
                usersSelect += StringUtils.BeforeLast((String) obj, " /");
            }
        }

        idx1 = jList4.getSelectedIndices();
        if(containsNonZeroIndex(idx1))
        {
            contextSelect="";
            Object[] selectedValues = jList4.getSelectedValues();
            for(Object obj: selectedValues)
            {
                if(!contextSelect.isEmpty()) {
                    contextSelect+=",";
                }
                usersSelect += obj;
            }
        }

        String resultat = "CONTEXT={"+contextSelect+"}; IP={"+ipSelect+"}; PROGRAM={"+programSelect+"}; USERS={"+usersSelect+"}; PID={ALL}";

        String SQL1 = "INSERT INTO sig_log (usua,ip,netbios,domain,tasca,inici,fi,resultat)"
        + " VALUES('ADMIN','"+CoreCfg.ip+"','"+CoreCfg.netbios+"','"+
        CoreCfg.core_PRODUCTID+"','SIGKILL',NOW(),date_add(NOW(),interval "+persistence+" minute),'"+resultat+"')";

        cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
        fillTable2();
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_jButton2ActionPerformed

    
    
    private void updateModels()
    {
        listening = false;
        modelList2.clear();
        modelList2.addElement("*");
        modelList3.clear();
        modelList3.addElement("*");
        modelList4.clear();
        modelList4.addElement("*");
        String SQL="SELECT distinct ip,netbios FROM sig_log where ip<>'' order by ip";
        ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL);
        try {
            while(rs1!=null && rs1.next())
            {
               String txt = rs1.getString(1)+ " / "+ rs1.getString(2);
               modelList2.addElement(txt);
            }
            if(rs1!=null) {
                rs1.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsersControlModule.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        SQL="SELECT distinct log.usua, p.nombre FROM sig_log as log left join"
                + " sig_professorat as p on p.abrev=log.usua where usua<>'' and usua<>'[]' order by usua";
        rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL);
        try {
            while(rs1!=null && rs1.next())
            {
               String identifier = rs1.getString(1);
               String txt = identifier + " / "+ StringUtils.noNull(rs1.getString(2));
               if(identifier.startsWith("["))
               {
                   txt += "windows user";
               }
               modelList3.addElement(txt);
            }
            if(rs1!=null) {
                rs1.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsersControlModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        SQL="SELECT distinct log.domain FROM sig_log as log where domain<>'' order by domain";
        rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL);
        try {
            while(rs1!=null && rs1.next())
            {
               String identifier = rs1.getString(1);            
               modelList4.addElement(identifier);
            }
            if(rs1!=null) {
                rs1.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsersControlModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        jList1.setSelectedIndex(0);
        jList2.setSelectedIndex(0);
        jList3.setSelectedIndex(0);
        jList4.setSelectedIndex(0);
        listening = true;
    }
    
    //Mostra nomes sigkills actius
    private void fillTable2()
    {
        while(jTable2.getRowCount()>0)
        {
            modelTable2.removeRow(0);
        }
        
        String SQL = "SELECT *, time(fi-inici) AS lasted FROM SIG_LOG WHERE tasca='SIGKILL' and"
                + " now()>=inici and now()<=fi ORDER BY inici ASC,usua";
   
        ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL);
        try {
            while(rs1!=null && rs1.next())
            {
               String txt = rs1.getString(1)+ " / "+ rs1.getString(2);
               //"","pid", "inici","lasted","kill processes"
               CellTableState cts = new CellTableState("",0,0);
               
               modelTable2.addRow(new Object[]{cts, rs1.getInt("id"), rs1.getString("inici"),
                rs1.getString("lasted"),rs1.getString("resultat")});
            }
            if(rs1!=null) {
                if(rs1!=null) {
                    rs1.close();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsersControlModule.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    
    }
    
    private void fillTable()
    {
        if(!listening) {
            return;
        }
        String conditions = "";
        Object[] selectedValues = jList1.getSelectedValues();
        List<Object> wordList = Arrays.asList(selectedValues);  
        selectedValues = null;
       
        if(wordList.size()>0 && !wordList.contains("*"))
        {
            conditions = " tasca IN (";
            for(int i=0; i<wordList.size(); i++)
            {
                conditions += "'"+wordList.get(i)+"',";
            }
            
            conditions = StringUtils.BeforeLast(conditions, ",")+") ";
        }
        
        wordList=null;
        if(!conditions.isEmpty())             
        {
            conditions = " AND "+conditions;
        }
        
       ///////////////////////////////// //Condicio sobre la ip
        String conditions2 = "";
        selectedValues = jList2.getSelectedValues();
        wordList = Arrays.asList(selectedValues);  
        selectedValues = null;
       
        if(wordList.size()>0 && !wordList.contains("*"))
        {
            conditions2 = " ip IN (";
            for(int i=0; i<wordList.size(); i++)
            {
                conditions2 += "'"+StringUtils.BeforeLast((String) wordList.get(i)," /")+"',";
            }
            
            conditions2 = StringUtils.BeforeLast(conditions2, ",")+") ";
        }
        
        wordList=null;
        if(!conditions2.isEmpty())             
        {
            conditions2 = " AND "+conditions2;
        }
        
        ///////////////////////////condicio sobre el domain
        
        String conditions3 = "";
        selectedValues = jList4.getSelectedValues();
        wordList = Arrays.asList(selectedValues);  
        selectedValues = null;
       
        if(wordList.size()>0 && !wordList.contains("*"))
        {
            conditions3 = " domain IN (";
            for(int i=0; i<wordList.size(); i++)
            {
                conditions3 += "'"+wordList.get(i)+"',";
            }
            
            conditions3 = StringUtils.BeforeLast(conditions3, ",")+") ";
        }
        
        wordList=null;
        if(!conditions3.isEmpty())             
        {
            conditions3 = " AND "+conditions3;
        }
        
        ///////////////////////////condicio sobre els ususaris
        
        String conditions4 = "";
        selectedValues = jList3.getSelectedValues();
        wordList = Arrays.asList(selectedValues);  
        selectedValues = null;
       
        if(wordList.size()>0 && !wordList.contains("*"))
        {
            conditions4 = " usua IN (";
            for(int i=0; i<wordList.size(); i++)
            {
                conditions4 += "'"+StringUtils.BeforeLast((String) wordList.get(i)," /")+"',";
            }
            
            conditions4 = StringUtils.BeforeLast(conditions4, ",")+") ";
        }
        
        wordList=null;
        if(!conditions4.isEmpty())             
        {
            conditions4 = " AND "+conditions4;
        }
        
        
        //////////////////////////////////////7
        
        String SQL = "SELECT *, concat(timediff(NOW(),inici),'') AS lasted FROM SIG_LOG WHERE fi IS NULL AND usua<>'[]' AND usua<>'' "
                + conditions + conditions2+ conditions3+ conditions4+ " ORDER BY lasted ASC,usua";
        
        //System.out.println("fillTAble1:"+SQL);
        
        ArrayList<Integer> selectedPids = new ArrayList<Integer>();
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
            if(((Boolean) jTable1.getValueAt(i,0))) {
                selectedPids.add((Integer) jTable1.getValueAt(i, 1));
            }
        }
        
        while(jTable1.getRowCount()>0)
        {
            modelTable1.removeRow(0);
        }
        
        ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL);
        try {
            while(rs1!=null && rs1.next())
            {
               String txt = rs1.getString(1)+ " / "+ rs1.getString(2);
               //"", "id", "user", "ip", "netbios", "task", "started", "lasted"
               int pid = rs1.getInt("id");
               modelTable1.addRow(new Object[]{selectedPids.contains(pid), pid, rs1.getString("usua"),
                rs1.getString("ip"),rs1.getString("netbios"),rs1.getString("tasca"),rs1.getString("inici"),
                rs1.getString("lasted")});
            }
            if(rs1!=null) {
                rs1.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsersControlModule.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    
    }
    
    
    private boolean containsNonZeroIndex(int[] idx1) {
        boolean contains = false;
        boolean contains0 = false;
        for(int i : idx1)
        {
            if(i!=0) {
                contains = true;
            }
            if(i==0)
            {
                contains0 = true;
            }
        }
        return (!contains0 && contains);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JList jList4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    //

}
