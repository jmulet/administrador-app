/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.apps.administrador.bimodules;

import com.l2fprod.common.swing.StatusBar;
import java.awt.Rectangle;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JToolBar;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.iesapp.apps.administrador.Cfg;
import org.iesapp.framework.pluggable.TopModuleWindow;
import org.iesapp.framework.table.CellTableState;
import org.iesapp.framework.table.MyCheckBoxRenderer;
import org.iesapp.framework.table.MyIconLabelRenderer;
import org.iesapp.framework.util.CoreCfg;

/**
 *
 * @author Josep
 */
public class GestioEspais extends TopModuleWindow {
    private DefaultTableModel modelTable1;
    private ArrayList<Integer> modifications;
    private final Cfg cfg;

    /**
     * Creates new form GestioEspais
     */
    public GestioEspais(Cfg cfg) {
        this.cfg = cfg;
        this.moduleDescription = "Gestió d'aules o espais";
        this.moduleDisplayName = "Gestió d'espais";
        this.moduleName = "gestioEspais";
      
        initComponents();
       
       //Carrega les zones de guardia
        ResultSet rs1;
        String SQL1 = "SELECT * FROM sig_espais order by id";
        rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1);
        try {

            while (rs1!=null && rs1.next()) {
                int id = rs1.getInt("id");
                String aula = rs1.getString("aula");
                String descripcio = rs1.getString("descripcio");
                String zona_guardia = rs1.getString("zona_guardia");
                boolean uguardia = rs1.getInt("utilizable_guardia") > 0;
                boolean reservable = rs1.getInt("reservable") >0;

                CellTableState cts = new CellTableState("", id, 0);

                modelTable1.insertRow(jTable1.getRowCount(), new Object[]
                            {cts, aula, descripcio, zona_guardia, uguardia, reservable});
            }
            if(rs1!=null) {
                rs1.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(GestioEspais.class.getName()).log(Level.SEVERE, null, ex);
        }

    
         
       modifications = new ArrayList<Integer>();
       modelTable1.addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                if(e.getType()==TableModelEvent.UPDATE)
                {
                    int row = jTable1.getSelectedRow();
                    int pkey = ((CellTableState) jTable1.getValueAt(row, 0)).getCode();
                    if(!modifications.contains(pkey))
                    {
                        modifications.add(pkey);
                    }
                }
            }
       }
        );
       
        jTable1.setIntercellSpacing( new java.awt.Dimension(2,2) );
         jTable1.setGridColor(java.awt.Color.gray);
         jTable1.setShowGrid(true);
 

        SQL1 = "SELECT * FROM sig_espais order by id";
        rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1);
        try {

            while (rs1!=null && rs1.next()) {
                int id = rs1.getInt("id");
                String aula = rs1.getString("aula");
                String descripcio = rs1.getString("descripcio");
                String zona_guardia = rs1.getString("zona_guardia");
                boolean uguardia = rs1.getInt("utilizable_guardia") > 0;
                boolean reservable = rs1.getInt("reservable") >0;

                CellTableState cts = new CellTableState("", id, 0);

                modelTable1.insertRow(jTable1.getRowCount(), new Object[]
                            {cts, aula, descripcio, zona_guardia, uguardia, reservable});
            }
            if(rs1!=null) {
                rs1.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(GestioEspais.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable()
        {
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex==0)
                return false;   //Disallow the editing of any cell
                else
                return true;
            }
        }
        ;

        jToolBar1.setFloatable(false);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/apps/administrador/icons/insert.gif"))); // NOI18N
        jButton2.setText("Inserta");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/apps/administrador/icons/configIcon.gif"))); // NOI18N
        jButton3.setText("Autogenera");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/apps/administrador/icons/save.gif"))); // NOI18N
        jButton1.setText("Desa");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        modelTable1 = new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Aula", "Descripció", "Zona guardia", "Disp. guardia",  "Disp. reserva"
            }
        );

        String[] icons = new String[] {
            "/org/iesapp/apps/administrador/icons/delete.gif"
        };

        jTable1.setModel(modelTable1);
        jTable1.getTableHeader().setReorderingAllowed(false);

        jTable1.getColumnModel().getColumn(0).setCellRenderer(new MyIconLabelRenderer(icons));
        jTable1.getColumnModel().getColumn(4).setCellRenderer(new MyCheckBoxRenderer());
        jTable1.getColumnModel().getColumn(5).setCellRenderer(new MyCheckBoxRenderer());

        JCheckBox checkBox = new JCheckBox();
        checkBox.setHorizontalAlignment(JLabel.CENTER);
        DefaultCellEditor checkBoxEditor = new DefaultCellEditor(checkBox);

        jTable1.getColumnModel().getColumn(4).setCellEditor(checkBoxEditor);
        jTable1.getColumnModel().getColumn(5).setCellEditor(checkBoxEditor);

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);
        jTable1.setRowHeight(32);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String SQL0 = "SELECT MAX(id) from " + CoreCfg.prefix +"espais";
        ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL0);
        int maxid = 0;
        try {
            if (rs1 != null && rs1.next()) {
            }
            maxid = rs1.getInt("max(id)");
        } catch (SQLException ex) {
            Logger.getLogger(GestioEspais.class.getName()).log(Level.SEVERE, null, ex);
        }
        maxid +=1;

        int n = jTable1.getRowCount();
        CellTableState cts = new CellTableState( "", maxid, 0);

        modelTable1.insertRow(n, new Object[]{cts, "", "", "", false, false});

        jTable1.setEditingRow(n);
        ensureVisible(n);

        String SQL1 = "INSERT INTO "+ CoreCfg.prefix + "espais (id, aula, descripcio, zona_guardia, utilizable_guardia, reservable) "
        + "VALUES(?, ?, ?, ?, ?, ?)";

        Object[] updatedValues = new Object[]{maxid, "", "", "", 0, 0};
        int nup = cfg.getCoreCfg().getMysql().preparedUpdate(SQL1, updatedValues);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //Option
        //missatge d'error :: no estic en condicions
        Object[] options = {"No", "Sí"};
        String missatge = "";

        missatge = "Es perdrà la configuració actual d'aules.\nVoleu continuar de totes maneres?";

        int nr = JOptionPane.showOptionDialog(javar.JRDialog.getActiveFrame(),
            missatge, "Informació",
            JOptionPane.INFORMATION_MESSAGE,
            JOptionPane.WARNING_MESSAGE,
            null,
            options,
            options[0]);

        if(nr!=1) {
            return;
        }

        String SQL1 = "SELECT DISTINCT aula FROM sig_horaris WHERE aula<>'' ORDER BY aula";
        ResultSet rs1 = null;
        rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1);

        //delete table
        while(jTable1.getRowCount()>0) {
            modelTable1.removeRow(0);
        }
        int id = 1;

        try {
            while(rs1!=null & rs1.next())
            {

                String aula = rs1.getString("aula");
                CellTableState cts = new CellTableState( "", id, 0);

                modelTable1.insertRow(jTable1.getRowCount(), new Object[]{cts, aula, "", "", true, false});
                id += 1;
            }
            if(rs1 !=null) {
                rs1.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(GestioEspais.class.getName()).log(Level.SEVERE, null, ex);
        }

        SQL1 = "Truncate sig_espais";
        int nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL1);

        int maxid = 0;
        int n = jTable1.getRowCount();
        for(int i=0; i<n; i++)
        {
            String aula = (String) jTable1.getValueAt(i, 1);
            String descripcio = (String) jTable1.getValueAt(i, 2);
            int guardiable = ((Boolean) jTable1.getValueAt(i, 4))? 1:0;
            int reservable = ((Boolean) jTable1.getValueAt(i, 5))? 1:0;

            SQL1 = "INSERT INTO "+ CoreCfg.prefix + "espais (id, aula, descripcio, zona_guardia, utilizable_guardia, reservable) "
            + "VALUES(?, ?, ?, ?, ?, ?)";

            Object[] updatedValues = new Object[]{i+1, aula, descripcio, "", guardiable, reservable};
            nup = cfg.getCoreCfg().getMysql().preparedUpdate(SQL1, updatedValues);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Save updated changes
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

       saveModifications();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int mcol = jTable1.getSelectedColumn();

        if(evt.getClickCount()==1 && mcol==0)
        {
            int conf = JOptionPane.showConfirmDialog(javar.JRDialog.getActiveFrame(), "Voleu eliminar aquesta entrada de la base de dades?", "Confirmacio",
                JOptionPane.YES_NO_OPTION);
            if (conf<0 || conf==1) {
                return;
            }

            int row = jTable1.getSelectedRow();

            CellTableState cts = (CellTableState) jTable1.getValueAt(row, 0);
            int id = ( (Number) cts.getCode() ).intValue();

            String SQL1 = "DELETE FROM "+CoreCfg.prefix+"espais where id='"+id+"'";
            //System.out.println(SQL1);
            int nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
            modelTable1.removeRow(row);

        }
    }//GEN-LAST:event_jTable1MouseClicked

     private void saveModifications()
     {
          if(jTable1.isEditing()) {
            jTable1.editCellAt(0, 0);
        }

        for(int id: modifications)
        {
            int i= findRow(id);
 
            String aula = (String) jTable1.getValueAt(i, 1);
            String descripcio= (String) jTable1.getValueAt(i, 2);
            String zona_guardia= (String) jTable1.getValueAt(i, 3);
            int disp_guardia = ((Boolean) jTable1.getValueAt(i, 4))? 1:0;
            int disp_reserva = ((Boolean) jTable1.getValueAt(i, 5))? 1:0;

            String SQL1 = "UPDATE " + CoreCfg.prefix + "espais SET "
            + "aula=?, descripcio=?, zona_guardia=?, utilizable_guardia=?, "
            + "reservable=? WHERE id='"+id+"'";

            Object[] updatedValues = new Object[]{aula, descripcio, zona_guardia,
                disp_guardia, disp_reserva};

            int nup = cfg.getCoreCfg().getMysql().preparedUpdate(SQL1, updatedValues);

        }
        modifications.clear();
     }
     
     private void ensureVisible( int rowIndex )
     {
            // corral into bounds
            rowIndex = Math.max( 0, Math.min( rowIndex, jTable1.getRowCount()- 1 ) );
            final Rectangle r = jTable1.getCellRect( rowIndex, 0, true );
            jTable1.scrollRectToVisible( r );
     }
     
    @Override
    public void setMenus(JMenuBar jMenuBar1, JToolBar jToolbar1, StatusBar jStatusBar1) {
         jToolbar1.add(jToolBar1);
    }
   
    @Override
    public void beforeDispose() {
        if(!modifications.isEmpty())
        {
            int confirm = JOptionPane.showConfirmDialog(javar.JRDialog.getActiveFrame(),"Voleu desar els canvis abans de tancar?", "Confirmació", JOptionPane.YES_NO_OPTION);
            if(confirm==JOptionPane.YES_OPTION)
            {
                saveModifications();
            }
        }
        modifications.clear();
    }
   
    /**
     * Find the row for a given scheme id
     * @param id
     * @return 
     */
     private int findRow(int id) {
        int row = -1;
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
            if(((CellTableState) jTable1.getValueAt(i, 0)).getCode()==id)
            {
                row = i;
                break;
            }
        }
        return row;
    }
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

   
}
