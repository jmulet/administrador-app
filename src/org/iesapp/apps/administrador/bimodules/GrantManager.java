/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.apps.administrador.bimodules;

import com.l2fprod.common.swing.JTaskPaneGroup;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.iesapp.apps.administrador.Cfg;
import org.iesapp.framework.pluggable.TopModuleWindow;
import org.iesapp.framework.pluggable.grantsystem.BeanRole;
import org.iesapp.framework.pluggable.grantsystem.GrantEntryForm;
import org.iesapp.framework.pluggable.grantsystem.GrantModule;
import org.iesapp.framework.pluggable.grantsystem.GrantSystem;

/**
 *
 * @author Josep
 */
public class GrantManager extends TopModuleWindow {
    private  DefaultListModel modelList1;
    private  ArrayList<BeanRole> allRoles;
    private boolean firstTime = true;
    private final HashMap<String,JTaskPaneGroup> mapTaskPanes = new HashMap<String,JTaskPaneGroup>();
    private final Cfg cfg;

    /**
     * Creates new form GrantManager
     */
    public GrantManager(Cfg cfg) {
        this.cfg = cfg;
        this.moduleDescription = "Roles Manager";
        this.moduleDisplayName = "Roles manager";
        this.moduleName = "rolesManager";
        initComponents();
        fillList();
        jTextArea1.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                updateRole();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                 updateRole();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateRole();
            }
        });
        if(modelList1.getSize()>0)
        {
            jList1.setSelectedIndex(0);
        }
        fillPanel();
        
        checkErrors();
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuDuplicate = new javax.swing.JMenuItem();
        jMenuRename = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuDelete = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTaskPane1 = new com.l2fprod.common.swing.JTaskPane();
        jLabel3 = new javax.swing.JLabel();

        jMenuDuplicate.setText("Duplicate");
        jMenuDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDuplicateActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuDuplicate);

        jMenuRename.setText("Rename");
        jMenuRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRenameActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuRename);
        jPopupMenu1.add(jSeparator1);

        jMenuDelete.setText("Delete");
        jMenuDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDeleteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuDelete);

        jLabel1.setText("Roles");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("+");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Description");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        com.l2fprod.common.swing.PercentLayout percentLayout1 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout1.setGap(14);
        percentLayout1.setOrientation(1);
        jTaskPane1.setLayout(percentLayout1);
        jScrollPane3.setViewportView(jTaskPane1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/apps/administrador/icons/atention.png"))); // NOI18N
        jLabel3.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentContainer());
        getContentContainer().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //Create new role
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String newRole = JOptionPane.showInputDialog("New role name");
        BeanRole br0 = new BeanRole(cfg.getCoreCfg());
        if(br0.exists(newRole))
        {
            JOptionPane.showMessageDialog(this, "The role named "+ newRole+" already exists.");
            return;
        }
        
        if(newRole!=null && !newRole.isEmpty())
        {
            BeanRole br = new BeanRole(cfg.getCoreCfg());
            br.setRole(newRole);
            br.save();
            int idRole = br.getId();
        
        
        //Create entries for this new role
        String SQL1 = "SELECT * from sig_grant";
        
        try {
            Statement st = cfg.getCoreCfg().getMysql().createStatement();
            ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
            while(rs1!=null && rs1.next())
            {
                 int idGrant = rs1.getInt("id");
                 int defaultValue = rs1.getInt("defaultValue");
                 String SQL2 = "INSERT INTO sig_grant_values (idGrant,idRole,value) VALUES('"+idGrant+"','"+idRole+"','"+defaultValue+"')";
                 cfg.getCoreCfg().getMysql().executeUpdate(SQL2);
            }
            if(rs1!=null)
            {
                rs1.close();
                st.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(GrantManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        checkErrors();
        fillList();
    }//GEN-LAST:event_jButton1ActionPerformed

    //Delete Role
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int row  = jList1.getSelectedIndex(); 
        if (row < 0) {
            return;
        }
        
        if(allRoles.get(row).getRole().equals("ADMIN") || allRoles.get(row).getRole().equals("GUARD"))
        {
            return;
        }
        
      
        //Confirmation
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if(showConfirmDialog!=JOptionPane.YES_OPTION)
        {
            return;
        }
        
        int idRole = allRoles.get(row).getId();
        allRoles.get(row).delete();
        modelList1.remove(row);
        
        //Delete all associated entries
        String SQL1 = "DELETE FROM sig_grant_values WHERE idRole="+idRole;
        cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
        
        checkErrors();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        fillPanel();
    }//GEN-LAST:event_jList1ValueChanged

    private void jMenuDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDuplicateActionPerformed
         int row = jList1.getSelectedIndex();
         if(row<0){
             return;
         }
        BeanRole role = allRoles.get(row);
        BeanRole newRole = role.duplicate();
        newRole.save();
        allRoles.add(newRole);
        //Generate missing entries
        fillList();
        jList1.setSelectedIndex(modelList1.getSize()-1);
    }//GEN-LAST:event_jMenuDuplicateActionPerformed

    private void jMenuRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRenameActionPerformed
        int row = jList1.getSelectedIndex();
        String role = allRoles.get(row).getRole();
         if(row<0 || role.startsWith("ADMIN") || role.startsWith("GUARD") || role.startsWith("PREF")){
             return;
         }
        String newName = JOptionPane.showInputDialog(this, "Rename role");
        BeanRole br0 = new BeanRole(cfg.getCoreCfg());
        if(!br0.exists(newName))
        {
            allRoles.get(row).rename(newName);
            fillList();
            jList1.setSelectedIndex(row);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "The role named "+ newName+" already exists.");
        }
    }//GEN-LAST:event_jMenuRenameActionPerformed

    private void jMenuDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDeleteActionPerformed
         int row = jList1.getSelectedIndex();
         if(row<0){
             return;
         }
         
        //Confirmation
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if(showConfirmDialog!=JOptionPane.YES_OPTION)
        {
            return;
        }
        
        int idRole = allRoles.get(row).getId();
        allRoles.get(row).delete();
        modelList1.remove(row);
        
        //Delete all associated entries
        String SQL1 = "DELETE FROM sig_grant_values WHERE idRole="+idRole;
        cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
         
        fillList();
         
    }//GEN-LAST:event_jMenuDeleteActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if(evt.getButton()==MouseEvent.BUTTON3)
        {
             jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jList1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JMenuItem jMenuDelete;
    private javax.swing.JMenuItem jMenuDuplicate;
    private javax.swing.JMenuItem jMenuRename;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private com.l2fprod.common.swing.JTaskPane jTaskPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void fillList() {
        modelList1 = new DefaultListModel();
        BeanRole br0 = new BeanRole(cfg.getCoreCfg());
        allRoles = br0.getAllRoles();
        for(BeanRole br: allRoles)
        {
            modelList1.addElement(br.getId()+" : "+br.getRole());
        }
        jList1.setModel(modelList1);
    }

    private void fillPanel() {
        int row = jList1.getSelectedIndex();
        if(row<0)
        {
            return;
        }
       String role = allRoles.get(row).getRole();
       
       BeanRole br0 = new BeanRole(cfg.getCoreCfg());
       
       ArrayList<String> allModules = br0.getAllModules();
        
        if(firstTime)
        {
             for(String module: allModules)
             {
                GrantModule instance = GrantSystem.getInstance(module, cfg.getCoreCfg());       
                instance.loadGrantForRole(role, null);
                JTaskPaneGroup jtpg = new JTaskPaneGroup();
                jtpg.setName(module);
                jtpg.setAnimated(false);
                jtpg.setCollapsable(true);
                
                jtpg.setTitle("Roles @ Module: "+module+ "   ("+instance.getMap().size()+" properties)");          
                jtpg.setExpanded(false);
                mapTaskPanes.put(module, jtpg);
             }
            firstTime = false;
        }
        
        for(String module: allModules)
        {
            GrantModule instance = GrantSystem.getInstance(module, cfg.getCoreCfg());
            JTaskPaneGroup jtpg = mapTaskPanes.get(module);
            jtpg.removeAll();
         
            instance.loadGrantForRole(role, null);
            int pos = 0;
            for(String key: instance.getMap().keySet())
            {
                GrantEntryForm form = new GrantEntryForm(instance.get(key),pos);
                jtpg.add(form);
                pos +=1;
            }
           jTaskPane1.add(jtpg);
        }
        jTaskPane1.validate();
        jTaskPane1.repaint();
        
        jTextArea1.setText(allRoles.get(row).getDescription());
       
    }
    
    private void updateRole()
    {
        int row = jList1.getSelectedIndex();
        if(row<0)
        {
            return;
        }
        allRoles.get(row).setDescription(jTextArea1.getText());
        allRoles.get(row).save();
    }
    
    private void checkErrors()
    {
         //Check possible Errors
        //Users which have undefined roles
        String SQL1 = "SELECT Nom, GrupFitxes FROM usu_usuari WHERE "
                + "usu_usuari.GrupFitxes NOT IN (SELECT role AS GrupFitxes FROM sig_grant_roles)";
       
        String txt = "";
        try {
            Statement st = cfg.getCoreCfg().getMysql().createStatement();
            ResultSet rs = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
            while(rs!=null && rs.next())
            {
                txt += rs.getString(2)+" ["+rs.getString(1)+"]; ";
            }
            rs.close();
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(GrantManager.class.getName()).log(Level.SEVERE, null, ex);
        }
      
        jLabel3.setVisible(!txt.isEmpty());
        jLabel3.setText("Undefined roles: "+txt);
    }
}
