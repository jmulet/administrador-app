/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.apps.administrador.bimodules;

import com.l2fprod.common.swing.StatusBar;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.Compilable;
import javax.script.ScriptEngine;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JMenuBar;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import jsyntaxpane.DefaultSyntaxKit;
import org.iesapp.framework.pluggable.TopModuleWindow;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.framework.util.Encryption;
import org.iesapp.framework.util.HtmlLog;

/**
 *
 * @author Josep
 */
public class ScriptsManager extends TopModuleWindow {

    /**
     * Creates new form ScriptsManager
     */
    public ScriptsManager() {
        this.moduleDisplayName = "Scripts Manager";
        DefaultSyntaxKit.initKit();        
        initComponents();
         
        File f = new File(CoreCfg.contextRoot+File.separator+"scripts");
        File[] listFiles = f.listFiles(new FilenameFilter(){

            public boolean accept(File dir, String name) {
                return name.endsWith(".jsx");
            }
        });
        DefaultListModel modelList1 = new DefaultListModel();
        for(File file: listFiles)
        {
            modelList1.addElement(file.getName());
        }
        jList1.setModel(modelList1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jRTabbedPane1 = new javar.JRTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        htmlLog1 = new org.iesapp.framework.util.HtmlLog();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        getContentContainer().setLayout(new java.awt.BorderLayout());

        jSplitPane1.setResizeWeight(0.3);

        jLabel3.setText("Editors");

        jScrollPane1.setViewportView(htmlLog1);

        jRTabbedPane1.addTab("Output", jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabel3)
                .addContainerGap(218, Short.MAX_VALUE))
            .addComponent(jRTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
        );

        jRTabbedPane1.getAccessibleContext().setAccessibleName("Output");

        jSplitPane1.setRightComponent(jPanel1);

        jLabel4.setText("Scripts");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        getContentContainer().add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
       if(evt.getClickCount()==2)
       {
           int row = jList1.getSelectedIndex();
           if(row<0)
           {
               return;
           }
           
           String fileName = (String) jList1.getSelectedValue();
           for(int i=0; i<jRTabbedPane1.getTabCount(); i++)
           {
              Component comp =  ((JScrollPane) jRTabbedPane1.getComponentAt(i)).getViewport().getView();
              String tabname = comp.getName(); 
              //System.out.println("Tab #"+i+"_ names:"+tabname + " ?equals to "+fileName+" "+comp.getClass());
              if(tabname!=null && tabname.equals(fileName))
              {
                  jRTabbedPane1.setSelectedIndex(i);
                  return;
              }
           }
           
           //Create new tab (editor must be within a scrollpane)
           JEditorPane jEditorPane1 = new JEditorPane();  
           jEditorPane1.setName(fileName);
          
           String txt="";
           //Add contents to the editor
           File file = new File(CoreCfg.contextRoot+File.separator+"scripts"+File.separator+fileName);
           try {
            Encryption enc = new Encryption();
            FileInputStream fis = new FileInputStream(file);
            DataInputStream in = new DataInputStream(fis);

            String readUTF = in.readUTF();
            //System.out.println("REaded "+readUTF);
            txt = enc.decrypt(readUTF);
            //System.out.println("REaded decrypted "+txt);
            
            fis.close();
            in.close(); 
           } catch (Exception ex) {
               Logger.getLogger(CoreCfg.class.getName()).log(Level.SEVERE, null, ex);
           }
         
         jRTabbedPane1.addTab(jEditorPane1, fileName, null, true);
         jEditorPane1.setContentType("text/javascript");
         jEditorPane1.setText(txt);
         jEditorPane1.setCaretPosition(0);
      
       }
    }//GEN-LAST:event_jList1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.iesapp.framework.util.HtmlLog htmlLog1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javar.JRTabbedPane jRTabbedPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setMenus(JMenuBar jMenuBar1, JToolBar jToolbar1, StatusBar jStatusBar1) {
        
        JButton saveButton = new JButton();
        saveButton.setIcon(new ImageIcon(ScriptsManager.class.getResource("/org/iesapp/framework/icons/save.gif")));
        saveButton.setToolTipText("Save script");
        saveButton.addActionListener(new ActionListener(){

            public void actionPerformed(ActionEvent e) {
                 Component comp = ((JScrollPane) jRTabbedPane1.getSelectedComponent()).getViewport().getView();
                 String name = comp.getName();
                 //System.out.println("At save : Component's name is"+name+ "  "+comp.getClass() );
                 if (name != null && name.endsWith(".jsx")) {
                     String text = ((JEditorPane) comp).getText();
                     //System.out.println("At save: text is "+text);
                     try {
                        File file = new File(CoreCfg.contextRoot+File.separator+"scripts"+File.separator+name);
                        FileOutputStream fos = new FileOutputStream(file);
                        DataOutputStream out = new DataOutputStream(fos);

                        Encryption enc = new Encryption();
                        out.writeUTF(enc.encrypt(text)); 
                        fos.close();
                        out.close();

                    } catch (Exception ex) {
                        Logger.getLogger(CoreCfg.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        jToolbar1.add(saveButton);
        
        
        
        JButton compileButton = new JButton();
        compileButton.setIcon(new ImageIcon(ScriptsManager.class.getResource("/org/iesapp/framework/icons/forward.gif")));
        compileButton.setToolTipText("Compile script");
        
        compileButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                int idx = jRTabbedPane1.getSelectedIndex();
                if(idx==0)
                {
                    return;
                }
                Component comp = ((JScrollPane) jRTabbedPane1.getSelectedComponent()).getViewport().getView();
                String code = ((JEditorPane) comp).getText();
                
                //Compile script and redirect output to logger tab
                jRTabbedPane1.setSelectedIndex(0);
                htmlLog1.clear();
                htmlLog1.append("<p> Compiling "+comp.getName()+"...</p>", HtmlLog.TITLETYPE);
                
                javax.script.ScriptEngineManager manager = new javax.script.ScriptEngineManager();
                ScriptEngine engine = manager.getEngineByName("js");
                Compilable compilable = (Compilable) engine;
                boolean success = false;
                try{
                    compilable.compile(code);
                    success = true;
                }
                catch(Exception ex)
                {
                    htmlLog1.append("<p>"+ex.toString()+"</p>", HtmlLog.ERRORTYPE);
                }
                if(success)
                {
                    htmlLog1.append("<p>Result: OK</p>", HtmlLog.SUMMARYTYPE);
                }
                    
            }
        });
        jToolbar1.add(compileButton);
    }


   
}
